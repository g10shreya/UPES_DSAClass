#include <stdio.h> 
#include <stdlib.h> 
#define MAX 100  // Maximum number of vertices 
void bfs(int adjacencyMatrix[MAX][MAX], int visited[MAX], int numVertices, int startVertex) { 
int queue[MAX], front = -1, rear = -1;  // Queue for BFS 
int i; 
// Mark the start vertex as visited and enqueue it 
visited[startVertex] = 1; 
queue[++rear] = startVertex; 
printf("BFS Traversal: "); 
while (front != rear) {  // While the queue is not empty 
// Dequeue a vertex 
int currentVertex = queue[++front]; 
printf("%d ", currentVertex); 
// Check all adjacent vertices 
for (i = 0; i < numVertices; i++) { 
            if (adjacencyMatrix[currentVertex][i] == 1 && visited[i] == 0) { 
                // If the vertex is adjacent and not visited, enqueue it 
                queue[++rear] = i; 
                visited[i] = 1; 
            } 
        } 
    } 
    printf("\n"); 
} 
 
int main() { 
    int numVertices, numEdges; 
    int adjacencyMatrix[MAX][MAX] = {0};  // Initialize adjacency matrix with 0s 
    int visited[MAX] = {0};  // Visited array initialized to 0 
 
    printf("Enter the number of vertices: "); 
    scanf("%d", &numVertices); 
 
    printf("Enter the number of edges: "); 
    scanf("%d", &numEdges); 
 
    printf("Enter the edges (u v) where u and v are vertex indices (0 to %d):\n", numVertices - 1); 
    for (int i = 0; i < numEdges; i++) { 
        int u, v; 
        scanf("%d %d", &u, &v); 
        adjacencyMatrix[u][v] = 1;  // Mark edge u->v 
        adjacencyMatrix[v][u] = 1;  // Mark edge v->u for undirected graph 
    } 
 
int startVertex; 
printf("Enter the starting vertex for BFS: "); 
scanf("%d", &startVertex); 
// Perform BFS 
bfs(adjacencyMatrix, visited, numVertices, startVertex); 
return 0; 
}
