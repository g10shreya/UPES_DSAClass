#include <stdio.h> 
// Function to swap two elements 
void swap(int* a, int* b) { 
    int temp = *a; 
    *a = *b; 
    *b = temp; 
} 
 
// Function to heapify a subtree with root at given index `i` 
void heapify(int arr[], int n, int i) { // `n` is the size of the heap 
    int largest = i;        // Initialize largest as root 
    int left = 2 * i + 1;   // Left child index 
    int right = 2 * i + 2;  // Right child index 
 
    // If left child is larger than root 
    if (left < n && arr[left] > arr[largest]) 
        largest = left; 
 
    // If right child is larger than largest so far 
    if (right < n && arr[right] > arr[largest]) 
        largest = right; 
 
    // If largest is not root 
    if (largest != i) { 
        swap(&arr[i], &arr[largest]); 
        // Recursively heapify the affected sub-tree 
        heapify(arr, n, largest); 
    } 
} 
// Function to build a max heap from the input array 
void buildMaxHeap(int arr[], int n) { 
    // Start from the last non-leaf node and heapify each node 
    for (int i = n / 2 - 1; i >= 0; i--) { 
        heapify(arr, n, i); 
    }} 
// Function to perform heap sort 
void heapSort(int arr[], int n) { 
    buildMaxHeap(arr, n); 
    for (int i = n - 1; i > 0; i--) { 
        // Move current root to end (largest element) 
        swap(&arr[0], &arr[i]); 
 
        // Reduce the heap size and heapify the root 
        heapify(arr, i, 0); 
    } 
} 
void printArray(int arr[], int n) { 
    for (int i = 0; i < n; i++) 
        printf("%d ", arr[i]); 
    printf("\n"); 
} 
int main() { 
    int arr[] = {11, 13, 6, 17, 8}; 
    int n = sizeof(arr) / sizeof(arr[0]); 
 
    printf("Original array: "); 
    printArray(arr, n); 
// Perform heap sort 
heapSort(arr, n); 
printf("Sorted array (Heap Sort): "); 
printArray(arr, n); 
return 0; 
} 
