#include <stdio.h> 
#include <stdlib.h> 
typedef struct { 
int data;     
// The value of the element 
int priority; // The priority of the element 
} PriorityQueueElement; 
// Priority Queue structure with array-based max heap 
typedef struct { 
PriorityQueueElement* elements; // Array of elements in the priority queue 
int size;                       
int capacity;                   
} PriorityQueue; 
// Current size of the priority queue 
// Maximum capacity of the priority queue 
// Function to create a new priority queue with a given capacity 
PriorityQueue* createPriorityQueue(int capacity) { 
PriorityQueue* pq = (PriorityQueue*)malloc(sizeof(PriorityQueue)); 
pq->elements = (PriorityQueueElement*)malloc(capacity * sizeof(PriorityQueueElement)); 
pq->size = 0; 
pq->capacity = capacity; 
return pq; 
} 
void swap(PriorityQueueElement* a, PriorityQueueElement* b) { 
PriorityQueueElement temp = *a; 
*a = *b; 
*b = temp; 
} 
void heapifyUp(PriorityQueue* pq, int index) { 
int parent = (index - 1) / 2; 
if (index > 0 && pq->elements[index].priority > pq->elements[parent].priority) { 
swap(&pq->elements[index], &pq->elements[parent]); 
heapifyUp(pq, parent); 
} 
} 
// Function to insert an element with a priority into the priority queue 
void insert(PriorityQueue* pq, int data, int priority) { 
if (pq->size == pq->capacity) { 
printf("Priority Queue is full!\n"); 
return; 
} 
    // Insert the new element at the end 
    pq->elements[pq->size].data = data; 
    pq->elements[pq->size].priority = priority; 
    pq->size++; 
    // Heapify up to maintain max heap property 
    heapifyUp(pq, pq->size - 1); 
} 
 
void heapifyDown(PriorityQueue* pq, int index) { 
    int largest = index; 
    int left = 2 * index + 1; 
    int right = 2 * index + 2; 
 
    if (left < pq->size && pq->elements[left].priority > pq->elements[largest].priority) 
        largest = left; 
 
    if (right < pq->size && pq->elements[right].priority > pq->elements[largest].priority) 
        largest = right; 
 
    if (largest != index) { 
        swap(&pq->elements[index], &pq->elements[largest]); 
        heapifyDown(pq, largest); 
    } 
} 
 
// Function to remove the element with the highest priority from the queue 
PriorityQueueElement removeMax(PriorityQueue* pq) { 
    if (pq->size == 0) { 
        printf("Priority Queue is empty!\n"); 
return (PriorityQueueElement){-1, -1}; // Indicate an empty queue 
} 
// Root of the heap is the highest priority element 
PriorityQueueElement maxElement = pq->elements[0]; 
// Move the last element to the root and reduce the size 
pq->elements[0] = pq->elements[pq->size - 1]; 
pq->size--; 
// Heapify down from the root to maintain max heap property 
heapifyDown(pq, 0); 
return maxElement; 
} 
// Function to print all elements in the priority queue (for demonstration) 
void printPriorityQueue(PriorityQueue* pq) { 
printf("Priority Queue elements:\n"); 
for (int i = 0; i < pq->size; i++) { 
printf("Data: %d, Priority: %d\n", pq->elements[i].data, pq->elements[i].priority); 
} 
} 
int main() { 
int capacity = 10; 
PriorityQueue* pq = createPriorityQueue(capacity); 
insert(pq, 10, 1); 
insert(pq, 20, 3); 
insert(pq, 30, 2); 
insert(pq, 40, 5); 
printf("Initial Priority Queue:\n"); 
printPriorityQueue(pq); 
PriorityQueueElement maxElement = removeMax(pq); 
printf("\nRemoved element with highest priority: Data = %d, Priority = %d\n", maxElement.data, 
maxElement.priority); 
printf("\nPriority Queue after removal:\n"); 
printPriorityQueue(pq); 
// Free memory 
free(pq->elements); 
free(pq); 
return 0; 
}
