#include <stdio.h> 
#include <stdlib.h> 
// Node structure for the singly linked list 
struct Node { 
int data; 
struct Node* next; 
}; 
// Function to create a new node 
struct Node* createNode(int data) { 
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); 
newNode->data = data; 
newNode->next = NULL; 
return newNode; 
} 
//  Insertion at the beginning 
void insertAtBeginning(struct Node** head, int data) { 
struct Node* newNode = createNode(data); 
newNode->next = *head; 
*head = newNode; 
} 
//  Insertion at the end 
void insertAtEnd(struct Node** head, int data) { 
    struct Node* newNode = createNode(data); 
    if (*head == NULL) { 
        *head = newNode; 
        return; 
    } 
    struct Node* temp = *head; 
    while (temp->next != NULL) { 
        temp = temp->next; 
    } 
    temp->next = newNode; 
} 
 
// Insertion at specific posotion 
void insertAtPosition(struct Node** head, int data, int position) { 
    if (position < 1) { 
        printf("Invalid position!\n"); 
        return; 
    } 
    if (position == 1) { 
        insertAtBeginning(head, data); 
        return; 
    } 
    struct Node* newNode = createNode(data); 
    struct Node* temp = *head; 
    for (int i = 1; i < position - 1 && temp != NULL; i++) { 
        temp = temp->next; 
    } 
    if (temp == NULL) { 
        printf("Position out of bounds\n"); 
        free(newNode); 
        return; 
    } 
    newNode->next = temp->next; 
    temp->next = newNode; 
} 
 
// Deletion at beginning 
void deleteFromBeginning(struct Node** head) { 
    if (*head == NULL) { 
        printf("List is empty\n"); 
        return; 
    } 
    struct Node* temp = *head; 
    *head = (*head)->next; 
    free(temp); 
} 
 
// Deletion at emd 
void deleteFromEnd(struct Node** head) { 
    if (*head == NULL) { 
        printf("List is empty\n"); 
        return; 
    } 
    struct Node* temp = *head; 
    if (temp->next == NULL) { 
        free(*head); 
        *head = NULL; 
        return; 
    } 
    while (temp->next->next != NULL) { 
        temp = temp->next; 
    } 
    free(temp->next); 
    temp->next = NULL; 
} 
 
//Deletion at specific position 
void deleteFromPosition(struct Node** head, int position) { 
    if (*head == NULL || position < 1) { 
        printf("List is empty or invalid position\n"); 
        return; 
    } 
    struct Node* temp = *head; 
    if (position == 1) { 
        deleteFromBeginning(head); 
        return; 
    } 
    for (int i = 1; i < position - 1 && temp != NULL; i++) { 
        temp = temp->next; 
    } 
    if (temp == NULL || temp->next == NULL) { 
        printf("Position out of bounds\n"); 
        return; 
    } 
    struct Node* nodeToDelete = temp->next; 
    temp->next = temp->next->next; 
    free(nodeToDelete); 
} 
 
// Function to display the linked list 
void displayList(struct Node* head) { 
    struct Node* temp = head; 
    if (temp == NULL) { 
        printf("List is empty\n"); 
        return; 
    } 
    printf("Linked List: "); 
    while (temp != NULL) { 
        printf("%d -> ", temp->data); 
        temp = temp->next; 
    } 
    printf("NULL\n"); 
} 
 
int main() { 
    struct Node* head = NULL; 
    int choice, data, position; 
 
    do { 
        printf("\n--- Singly Linked List Menu ---\n"); 
        printf("1. Insert at Beginning\n"); 
        printf("2. Insert at End\n"); 
        printf("3. Insert at Position\n"); 
        printf("4. Delete from Beginning\n"); 
        printf("5. Delete from End\n"); 
        printf("6. Delete from Position\n"); 
        printf("7. Display List\n"); 
        printf("8. Exit\n"); 
        printf("Enter your choice: "); 
        scanf("%d", &choice); 
 
        switch (choice) { 
            case 1: 
                printf("Enter data: "); 
                scanf("%d", &data); 
                insertAtBeginning(&head, data); 
                break; 
            case 2: 
                printf("Enter data: "); 
                scanf("%d", &data); 
                insertAtEnd(&head, data); 
                break; 
            case 3: 
                printf("Enter data: "); 
                scanf("%d", &data); 
                printf("Enter position: "); 
                scanf("%d", &position); 
                insertAtPosition(&head, data, position); 
                break; 
            case 4: 
                deleteFromBeginning(&head); 
                break; 
            case 5: 
                deleteFromEnd(&head); 
                break; 
            case 6: 
                printf("Enter position: "); 
                scanf("%d", &position); 
                deleteFromPosition(&head, position); 
                break; 
            case 7: 
                displayList(head); 
                break; 
            case 8: 
                printf("Exiting...\n"); 
                break; 
            default: 
                printf("Invalid choice. Please try again.\n"); 
        } 
    } while (choice != 8); 
 
    return 0; 
}
