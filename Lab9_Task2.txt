#include <stdio.h> 
#include <stdlib.h> 
struct TreeNode { 
    int data; 
    struct TreeNode* left; 
    struct TreeNode* right; 
}; 
// Function to create a new node 
struct TreeNode* createNode(int value) { 
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode)); 
    if (newNode == NULL) { 
        printf("Memory allocation failed\n"); 
        exit(1); 
    } 
    newNode->data = value; 
    newNode->left = NULL; 
    newNode->right = NULL; 
    return newNode; 
} 
// Function to insert a new node in the binary tree 
struct TreeNode* insertNode(struct TreeNode* root, int value) { 
    if (root == NULL) { 
        return createNode(value); // Create and return new node if root is null 
    } 
 
    // Insert node in the left or right subtree 
    if (value < root->data) { 
        root->left = insertNode(root->left, value); 
   } else if (value > root->data) { 
        root->right = insertNode(root->right, value); 
    } else  
        printf("Value already exists in the tree.\n"); 
    return root; 
} 
//  display the tree  
void inOrderTraversal(struct TreeNode* root) { 
    if (root != NULL) { 
        inOrderTraversal(root->left); 
        printf("%d ", root->data); 
        inOrderTraversal(root->right); 
    } 
} 
int main() { 
    struct TreeNode* root = NULL; 
    int choice, value; 
    do { 
        printf("\n--- Binary Tree Menu ---\n"); 
        printf("1. Insert Node\n"); 
        printf("2. Display Tree (In-order Traversal)\n"); 
        printf("3. Exit\n"); 
        printf("Enter your choice: "); 
        scanf("%d", &choice); 
        switch (choice) { 
            case 1: 
                printf("Enter value to insert: "); 
                scanf("%d", &value); 
                root = insertNode(root, value); 
                break; 
            case 2: 
                printf("In-order traversal of the binary tree:\n"); 
                inOrderTraversal(root); 
                printf("\n"); 
                break; 
            case 3: 
                printf("Exiting...\n"); 
                break; 
            default: 
                printf("Invalid choice. Please try again.\n"); 
        } 
    } while (choice != 4); 
    return 0; 
} 
