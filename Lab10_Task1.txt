#include <stdio.h> 
#include <stdlib.h> 
// Define the structure for an AVL Tree Node 
struct TreeNode { 
int data; 
struct TreeNode* left; 
struct TreeNode* right; 
int height; 
}; 
// Helper function to get the height of a node 
int height(struct TreeNode* node) { 
return (node == NULL) ? 0 : node->height; 
} 
// Helper function to calculate the balance factor 
int getBalance(struct TreeNode* node) { 
return (node == NULL) ? 0 : height(node->left) - height(node->right); 
} 
// Create a new AVL Tree node 
struct TreeNode* createNode(int value) { 
struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode)); 
newNode->data = value; 
newNode->left = NULL; 
newNode->right = NULL; 
newNode->height = 1; // New node is initially at height 1 
return newNode; 
} 
// Right Rotate (for LL imbalance) 
struct TreeNode* rightRotate(struct TreeNode* y) { 
struct TreeNode* x = y->left; 
struct TreeNode* T2 = x->right; 
// Perform rotation 
x->right = y; 
y->left = T2; 
// Update heights 
y->height = 1 + (height(y->left) > height(y->right) ? height(y->left) : height(y->right)); 
x->height = 1 + (height(x->left) > height(x->right) ? height(x->left) : height(x->right)); 
return x; 
} 
// Left Rotate (for RR imbalance) 
struct TreeNode* leftRotate(struct TreeNode* x) { 
struct TreeNode* y = x->right; 
struct TreeNode* T2 = y->left; 
// Perform rotation 
y->left = x; 
x->right = T2; 
// Update heights 
x->height = 1 + (height(x->left) > height(x->right) ? height(x->left) : height(x->right)); 
y->height = 1 + (height(y->left) > height(y->right) ? height(y->left) : height(y->right)); 
return y; 
} 
// Insert a node and balance the tree if needed 
struct TreeNode* insertNode(struct TreeNode* node, int value) { 
    // 1. Perform the normal BST insertion 
    if (node == NULL) 
        return createNode(value); 
 
    if (value < node->data) 
        node->left = insertNode(node->left, value); 
    else if (value > node->data) 
        node->right = insertNode(node->right, value); 
    else 
        return node; // No duplicates allowed 
    // 2. Update height of this ancestor node 
    node->height = 1 + (height(node->left) > height(node->right) ? height(node->left) : height(node
>right)); 
 
    // 3. Get the balance factor to check if this node became unbalanced 
    int balance = getBalance(node); 
 
    // Left Left Case 
    if (balance > 1 && value < node->left->data) 
        return rightRotate(node); 
 
    // Right Right Case 
    if (balance < -1 && value > node->right->data) 
        return leftRotate(node); 
 
    // Left Right Case 
    if (balance > 1 && value > node->left->data) { 
        node->left = leftRotate(node->left); 
        return rightRotate(node); 
    } 
 
    // Right Left Case 
    if (balance < -1 && value < node->right->data) { 
        node->right = rightRotate(node->right); 
        return leftRotate(node); 
    } 
    return node; 
} 
// Find the node with minimum value in the subtree 
struct TreeNode* minValueNode(struct TreeNode* node) { 
    struct TreeNode* current = node; 
    while (current->left != NULL) 
        current = current->left; 
    return current; 
} 
// Delete a node and balance the tree if needed 
struct TreeNode* deleteNode(struct TreeNode* root, int value) { 
    // 1. Perform the normal BST deletion 
    if (root == NULL) 
        return root; 
 
    if (value < root->data) 
        root->left = deleteNode(root->left, value); 
    else if (value > root->data) 
        root->right = deleteNode(root->right, value); 
    else { 
        // Node with only one child or no child 
        if ((root->left == NULL) || (root->right == NULL)) { 
            struct TreeNode* temp = root->left ? root->left : root->right; 
            if (temp == NULL) { 
                temp = root; 
                root = NULL; 
            } else 
                *root = *temp; 
            free(temp); 
        } else { 
            // Node with two children 
            struct TreeNode* temp = minValueNode(root->right); 
            root->data = temp->data; 
            root->right = deleteNode(root->right, temp->data); 
        } 
    } 
    // If the tree had only one node then return 
    if (root == NULL) 
        return root; 
 
    // 2. Update height 
    root->height = 1 + (height(root->left) > height(root->right) ? height(root->left) : height(root->right)); 
 
    // 3. Get balance factor to check if this node became unbalanced 
    int balance = getBalance(root); 
 
    // Left Left Case 
    if (balance > 1 && getBalance(root->left) >= 0) 
        return rightRotate(root); 
 
    // Left Right Case 
    if (balance > 1 && getBalance(root->left) < 0) { 
        root->left = leftRotate(root->left); 
        return rightRotate(root); 
    } 
 
    // Right Right Case 
    if (balance < -1 && getBalance(root->right) <= 0) 
        return leftRotate(root); 
 
    // Right Left Case 
    if (balance < -1 && getBalance(root->right) > 0) { 
        root->right = rightRotate(root->right); 
        return leftRotate(root); 
    } 
 
    return root; 
} 
 
// In-order traversal 
void inOrder(struct TreeNode* root) { 
    if (root != NULL) { 
        inOrder(root->left); 
        printf("%d ", root->data); 
        inOrder(root->right); 
    } 
} 
 
int main() { 
    struct TreeNode* root = NULL; 
    int choice, value; 
    do { 
        printf("\nAVL Tree Menu:\n"); 
        printf("1. Insert\n"); 
        printf("2. Delete\n"); 
        printf("3. Display (In-order Traversal)\n"); 
        printf("4. Exit\n"); 
        printf("Enter choice: "); 
        scanf("%d", &choice); 
 
        switch (choice) { 
            case 1: 
                printf("Enter value to insert: "); 
                scanf("%d", &value); 
                root = insertNode(root, value); 
                break; 
            case 2: 
                printf("Enter value to delete: "); 
                scanf("%d", &value); 
                root = deleteNode(root, value); 
                break; 
            case 3: 
                printf("In-order traversal: "); 
                inOrder(root); 
                printf("\n"); 
                break; 
            case 4: 
                printf("Exiting program.\n"); 
break; 
default: 
printf("Invalid choice.\n"); 
} 
} while (choice != 4); 
return 0; 
}
